/*    
          *** GOOD TO KNOW ***
top right corner   top-> y      
    (x,y)   +--------------------+  <- right top corner -> (x+width, y )
            |                    |      
    left    |                    |   right   
      x     |       SQUARE       |  x+width
            |                    |
   bottom   |                    |
left corner |                    |
(x,y+height)+--------------------+  <- (x+width, y+width)
               bottom-> y+height   
--------------------------------------------------------------------------------------

              ****  GRAVITY & GROUND ****
 1. To simulate gravity for the player to gradually fall, by gradually increasing the y velocity:
 add a variable named "gravity" and give it a value
 
2. stop the player when their bottom edge hits the bottom of the ground.
  - player bottom: this.position.y + this.height --> y move downward, if y = 100, player start at 100, and its height 25, so 125 for its feet.
  - ground level: canvas.height
  - collide with ground : this.position.y + this height >= canvas.height
  - Feet on the ground: this.position.y = canvas.height - this.height; 
  - stop falling: this.velocity.y = 0


                ****  PLAYER MOVEMENTS logic****
   1. add evendListeners to listen for events, "keydown"and "keyup" are the types of events.
      pass to the callback an event object {code} to extract the code property from the event.
   2. to stop when keyup set the velovity of "x" or "y" to "0".


               *** STOP INFINITE JUMPING logic***
  1. Need to know if the player is on the ground by : this.position.y + this.height >= canvas.height if 100 is >600
  2. Add inOnGround check in the Player class to check if the player is touching the ground exactly, if yes we can jump: velocity -= 10
  3. Modify in the update method using isOnGround, if the Player is not on the ground continue falling by apllying gravity else stop gravity: velocity = 0.
     add in case of "ArrowUp"in evenListeners if player is on the ground he can jump.

               *** ADD DOUBLE JUMP logic***
  1. Create a variable and assign a value to 0: this.jumpCount = 0
  2. Create a function that will increment the value of jumpCount and set the velocity upward
  3. in eventListeners if jumpcount < 2 call the function jump function.

              *** STOP SQUARE FLICKERING logic ***
  Since the sprite image is loading, just like a fetch call or any asynchronous operation
  where we track when it's done or not, using the flag "isloading". used like a custom flag to confirm image is loaded.

  1. Add property "loaded" to imageHandler class instance.

             *** preloadSprites FILE ***
    help to:
      - load all image sprite --> avoid flickering.
      - sprite base on keybord events.

    Here we attach a single ImageHandler instance to spriteConfig by assigning it to each config.handler,
    later in eventListeners we assign that handler to player.imgRenderer.
    This allows the Player class to use the animate() and draw() methods from ImageHandler during the game loop
    in index.js, we call preloadSprites() befor calling making a new instance of Player.
    This prevents reloading the same image multiple times.

            **** Platform Logic ***


            ---------
            
            ****double jump for eventListeners ****

    explaination of adding jumpPressed:
    The keydown event only fires once when a key is initially pressed — holding the key doesn’t trigger repeated keydown events for jumping. As a result:
    If we press and hold the jump key (like ArrowUp), only one jump() call is triggered.
    To trigger a double jump, the key must be released and pressed again before landing.
    But in our case, the second press might not be triggering correctly, or it's being ignored if the key is still "held down" in the Set.

         **** explaination about  enemy death ****

         **** explaination about animation frame ****

         **** explaination about  cooldown timer****

         pb: all hearts are disapearing  as long as the enemy is in contact with player, 
         solution: add a cooldown timer to limit how often the player can get hit.

         cooldown would be an utility function not a class because ennemy or weapon would use it.

         MISTAKE: i did the following: PASSING BY VALUE VS REFERENCE
            - inside enemy class:
               coolDown(this.hasRecentlyHitPlayer, 1000);
            - inside coolDown:
                  setTimeout(() => {
                  isCoolingDown = false;
                  }, 1000);
         
         EXPLANATION:
               this.hasRecentlyHitPlayer is a boolean (true or false) → a primitive type.
               JavaScript passed a copy of the value, not the original.
               So setting isCoolingDown = false only changed the local variable inside the function, not the original property on this.

         SOLUTION: 
               to change the original property value: pass the object (this) and the property name:
               coolDown(this, "hasRecentlyHitPlayer", false, 1000);
               and now we  can directly change the actual property on the object:
               setTimeout(() => {object[property] = valueAfterCooldown;}, duration); 

         CONCLUSION: 
               to modify the original value of the object(itself) we pass the object and property name(as a string). 
               not a primitive value who change locally.


         **** explaination about  init() logic****

                Here we are creating a function init() stands for initialisation/to restart the game.
                init() is not built-in, but it's a commonly used custom method/function name.

TRICKY CONCEPT: 
1. PASSING BY VALUE VS REFERENCE
2. ASYNCHRONOUS TIMING WITH seTimout 
3. SCOPING
4. CALLBACKS
5. HOISTED

MISTAKE: 
      OBEJCT VS VALUE IN PARAMS:
            - passed value in params, then in the constructor, they must be declared in the exact same order.
            ex: new ImageHandler(src, cols, rows, frameY, loopOnce, frameSpeed);
            constructor(src, totalCols, totalRows, frameY, loopOnce, frameSpeed)
            -solution pass object instead instead, can pass values out of order:
            ex: new ImageHandler({src: "...",totalCols: 7, totalRows: 1, frameY: 0, loopOnce: false, frameSpeed: 30,});


         **** ACTIONS BASED FUNCTION / PURE FUNCTIONS / IMPURE / RETURN  ****

 example find in global_utilities: 
      even if createSpriteRenderer return something it is not considerd a pure function because
      it had side effects(like logging:console.log, modifying/reads external state:spriteConfig", DOM, etc.)
       in summary it's an impure helper function that returns a value but also causes side effects by accessing external 
      state and logging, so it’s not a pure function nor a purely action-based one.

 Question: why sould we use "return" in a function?
 Response: When we want the function to produce a result that can be used elsewhere in the code, it return that value.

      Actions based funtions:
      - used for side effects ex.: change the DOM, play audio, update state. 
      - don't need to return something

      Pure functions: 
      For a given set of inputs, the output is always the same
      - no side effects
      - do not modify variable outside its scope.
      - no interaction with external system API, database,DOM manipulation
      - they do not change the input *values but instead they return a new value or object.

      conclusions:
      - Pure function = returns value + no side effects + deterministic
      - Your function = returns value + has side effects → impure

      impure function ---> function(a,b){const result = a+b console.log(result);return result}
      pure function ---> function(a,b){const result = a+b return result}
      Action-based function: causes side effects + may or may not return value → impure






 */
       